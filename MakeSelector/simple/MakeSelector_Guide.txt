MakeSelector_Guide.txt --- 
;; 
;; Description: 使用root来数据处理。
;; Author: Hongyi Wu(吴鸿毅)
;; Email: wuhongyi@qq.com 
;; Created: 日 3月  9 10:28:13 2014 (+0800)
;; Last-Updated: 六 3月 22 12:59:23 2014 (+0800)
;;           By: Hongyi Wu(吴鸿毅)
;;     Update #: 3
;; URL: http://wuhongyi.cn 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
终端中用root打开要处理的NameOfFile.root文件：
$ root NameOfFile.root
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
自动生成处理数据Tree的类，NameOfClass.h跟NameOfClassC文件：
root[] NameOfTree->MakeSelector("NameOfClass")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
对生成的NameOfClass.h跟NameOfClassC文件进行个性化定制，以满足自己的要求：

Tree中的变量leaf，.h文件中已经定义，只需要看懂就行
// Declaration of leaf types
   Double_t        x;
   Double_t        y;
   Double_t        z;
Tree中的branch，.h文件中已经定义，只需要看懂就行
// List of branches
   TBranch        *b_x;
   TBranch        *b_y;
   TBranch        *b_z;

所有的定义都必须在.h文件中添加定义：（例如）
   TFile* f;//新建一个文件
   TTree* t;//新建一个Tree
   double px;
   double py;
   double pz;

.C文件可以定制满足自己数据要求的函数，.C文件自己携带了五个函数让你补充，
 Begin()，SlaveBegin()，Process()，SlaveTerminate()，Terminate()。
其中SlaveBegin()跟SlaveTerminate()没使用过，所以没给它添加过命令。

Begin()做数据处理前的准备：（例如）
   f=new TFile("NameOfRoot.root","RECREATE");
   t=new TTree("NameOfTree","description the Tree");
   t->Branch("NameOfBranch1",&px,"px/D");//新建Branch
   t->Branch("NameOfBranch2",&py,"py/D");
   t->Branch("NameOfBranch3",&pz,"pz/D");
如果想画图就做画图的准备，粒子筛选就做筛选的准备……

Process()自动进行数据处理，每次执行Process()自动从每个Branch中各提取一个
数据，然后进行自己定制的功能：（例如）
  b_x->GetEntry(entry);//必须有这个语句，告诉程序数据从b_x这个Branch获取
  b_y->GetEntry(entry);
  b_z->GetEntry(entry);
  px=x;
  py=y;
  pz=z;
  t->Fill();

Terminate()是进行收尾工作：（例如）
  t->Write();
  f->Close();

.C文件中可以自己添加函数！！！
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
对数据进行处理：
root[] NameOfTree->Process("NameOfClass.C")

以上就完成了数据的处理！

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
